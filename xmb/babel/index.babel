var ICON_SIZE=100;
var PADDING=10;

//todo: pull model from XHR or some

var model = {
    cursor:{
        x:0,
        y:0
    },
    columns:{
      "Genders":{
        index:0,
        title:"settings",
        selectedIndex:0,
        active:false,
        icon:"settings",
        items:[
          {title:"info",subtitle:"subtitle",active:false,icon:"info"},
          {title:"grade",subtitle:"subtitle",active:false,icon:"grade"},
          {title:"toll",subtitle:"subtitle",active:false,icon:"toll"},              {title:"info",subtitle:"subtitle",active:false,icon:"info"},
          {title:"grade",subtitle:"subtitle",active:false,icon:"grade"},
          {title:"toll",subtitle:"subtitle",active:false,icon:"toll"}
        ]
      },
      "Orientations":{
        index:1,
        title:"explore",
        selectedIndex:1,
        active:false,
        icon:"explore",
        items:[
          {title:"Aromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Asexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Biromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Bisexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Ceteroromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Ceterosexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Demiromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Demisexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Gray-Aromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Gray-Asexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Homoflexible",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Homoromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Homosexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Muliromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Mulisexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Panromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Pansexual",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Polyamorous",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Viroromantic",subtitle:"subtitle",active:false,icon:"face"},
          {title:"Virosexual",subtitle:"subtitle",active:false,icon:"face"}
        ]
      },
      "Pronouns":{
        index:2,
        title:"play_arrow",
        selectedIndex:1,
        active:false,
        icon:"play_arrow",
        items:[
          {title:"Enter",subtitle:"subtitle",active:false,icon:"edit"}
        ]
      }
    }
  }

//add zero position to each column and item
_.each(model.columns,(c)=>{
  c.position = {x:0,y:0};
  _.each(c.items,(i)=>{
    i.position = {
      x:0,
      y:0
    };
  });
});

var xmbVue = new Vue({
  el:"#xmb",
  data:model,
  methods:{
    handleKey:function(dir,val){
      this.cursor[dir]+=val;
      var nCols = this.nColumns;
      
      // wrap x
      this.cursor.x = this.cursor.x % nCols;
      if (this.cursor.x < 0){
        this.cursor.x = this.cursor.x + nCols;
      }
            
      //wrap y
      var nRows = this.nRows;
      this.cursor.y = this.cursor.y % nRows;
      if (this.cursor.y < 0){
        this.cursor.y = this.cursor.y + nRows ;
      }
      
      this.highlightCell(this.cursor.x,this.cursor.y)
           
    },
    highlightCell:function(column,row){
                  
      console.log(column,row);
      //update position of elements as well
      var xAccum = (-column-1) * (ICON_SIZE + PADDING);
      if (column == 0){
        xAccum +=  (ICON_SIZE + PADDING);
      }
      var yAccum;
      
      _.each(this.columns,(col,colKey)=>{
        col.active = false;
        yAccum = -(ICON_SIZE + PADDING)*(row+1);
        
        col.position.x = xAccum;
        xAccum +=  (ICON_SIZE + PADDING);
        if (column === col.index || column === col.index + 1){
          xAccum +=  (ICON_SIZE)/2;
        }
        
        _.each(col.items,(item,rowN)=>{
          if(rowN == row && col.index == column){
            item.active=true;
            col.active = true;
          }else{
            item.active = false;
          }
                    
          if(rowN == row){
            yAccum+= (ICON_SIZE + PADDING);
          }                
          yAccum+= (ICON_SIZE + PADDING);  
          item.position.y = yAccum; 
          
        });
      });      
      this.cursor.y = row;
      this.cursor.x = column;
    }
  },
  watch:{
    cursor:function(e){
      console.log('cursor mutated',e);
    }
  },
  computed:{
    nColumns:function(){
      return Object.keys(this.columns).length;
    },
    nRows:function(){
      //get the row at the current index
      var row = this.columnsArray[this.cursor.x];
      if (!row){
        console.log('invalid row index: ',this.cursor.x);
        return 0;
      }
      return row.items.length;//todo: number of columns in this row
    },
    columnsArray:function(){
      //get columns in an array
      var arr = [];
      Object.keys(this.columns).forEach((key)=>{
        arr.push(this.columns[key]);
      });
      return _.sortBy(arr,'index');
    }
  },
  created:function(){
    _.each(this.columns,(column)=>{
      _.each(column.items,(item)=>{
        item.active = false;
      });      
    }); 
    this.highlightCell(this.cursor.x,this.cursor.y);
  }
});

// handle movement based on keys
$('body').on('keyup',function(e){
  if (e.key == "ArrowUp"){
    xmbVue.handleKey('y',-1);
  }else if (e.key == "ArrowDown"){
    xmbVue.handleKey('y',1);
  }else if (e.key == "ArrowLeft"){
    xmbVue.handleKey('x',-1);
  }else if (e.key == "ArrowRight"){
    xmbVue.handleKey('x',1);
  }
});

$('body').on("mousewheel",_.throttle(scrollHandler,10));

function scrollHandler(e){
  console.log(e);
  if (e.deltaX){
    xmbVue.handleKey('x',Math.sign(e.deltaX));
  }
  if (e.deltaY){
    xmbVue.handleKey('y',Math.sign(e.deltaY));
  }
}